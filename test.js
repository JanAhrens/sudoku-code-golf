// TODO replace `v` and `s` with your solution
f=[0,9,18,27,36,45,54,63,72]
v=a=>{for(q=[],f.map(b=>q.push(a.slice(b,b+9).split``)),h=0;h<9;h++)q.push(f.map(b=>a[b+h]));for(h=0;h<3;h++)for(k=0;k<3;k++){for(m=[],t=0;t<3;t++)f.slice(3*h,3*h+3).map(b=>m.push(a[3*k+b+t]));q.push(m)}console.log(q.map(w=>w.filter(x=>x!="-")).filter(a=>a.filter((y,z)=>a.indexOf(y)!=z).length>0));return q.map(w=>w.filter(x=>x!="-")).filter(a=>a.filter((y,z)=>a.indexOf(y)!=z).length>0).length<1}
r=a=>{if(a.indexOf("-")<0)return a;for(var b=1;b<10;b++)if(i=a.replace("-",b),v(i)){var d=r(i);if(v(d))return d}return i}
s=b=>(e="-".repeat(81),b.length==81?(o=r(b),v(o)?o:e):e)

assert = (condition, message) => {
  if (!condition) {
      console.log(`failed: ${message}`);
  } else {
    process.stdout.write(".")
  }
}

assert(v('91-284753745396218832157496429763185378415962561928374984672531257831649613549827'),'should be valid')
process.exit(1)

// initial validation
assert( v('53--7----6--195----98----6-8---6---34--8-3--17---2---6-6----28----419--5----8--79'), "sample should be valid");
assert( v('534678912672195348198342567859761423426853791713924856961537284287419635345286179'), 'solved should be valid');
assert(s('53--7----6--195----98----6-8---6---34--8-3--17---2---6-6----28----419--5----8--79') === '534678912672195348198342567859761423426853791713924856961537284287419635345286179', "sample should be solveable");

// go into details

// rows
assert( v('123456789------------------------------------------------------------------------'), "valid first row");
assert(!v('123456788------------------------------------------------------------------------'), "invalid first row");
assert( v('---------123456789---------------------------------------------------------------'), "valid second row");
assert(!v('---------123456788---------------------------------------------------------------'), "invalid second row");
assert( v('------------------123456789------------------------------------------------------'), "valid third row");
assert(!v('------------------123456788------------------------------------------------------'), "invalid third row");
assert( v('---------------------------123456789---------------------------------------------'), "valid forth row");
assert(!v('---------------------------123456788---------------------------------------------'), "invalid forth row");
assert( v('------------------------------------123456789------------------------------------'), "valid fifth row");
assert(!v('------------------------------------123456788------------------------------------'), "invalid fifth row");
assert( v('---------------------------------------------123456789---------------------------'), "valid sixth row");
assert(!v('---------------------------------------------123456788---------------------------'), "invalid sixth row");
assert( v('------------------------------------------------------123456789------------------'), "valid seventh row");
assert(!v('------------------------------------------------------123456788------------------'), "invalid seventh row");
assert( v('---------------------------------------------------------------123456789---------'), "valid eigth row");
assert(!v('---------------------------------------------------------------123456788---------'), "invalid eigth row");
assert( v('------------------------------------------------------------------------123456789'), "valid ninth row");
assert(!v('------------------------------------------------------------------------123456788'), "invalid ninth row");

// columns
assert( v('1--------2--------3--------4--------5--------6--------7--------8--------9--------'), "valid first column");
assert(!v('1--------2--------3--------4--------5--------5--------7--------8--------9--------'), "invalid first column");
assert( v('-1--------2--------3--------4--------5--------6--------7--------8--------9-------'), "valid second column");
assert(!v('-1--------2--------3--------4--------5--------5--------7--------8--------9-------'), "invalid second column");
assert( v('--1--------2--------3--------4--------5--------6--------7--------8--------9------'), "valid third column");
assert(!v('--1--------2--------3--------4--------5--------5--------7--------8--------9------'), "invalid third column");
assert( v('---1--------2--------3--------4--------5--------6--------7--------8--------9-----'), "valid forth column");
assert(!v('---1--------2--------3--------4--------5--------5--------7--------8--------9-----'), "invalid forth column");
assert( v('----1--------2--------3--------4--------5--------6--------7--------8--------9----'), "valid firth column");
assert(!v('----1--------2--------3--------4--------5--------5--------7--------8--------9----'), "invalid firth column");
assert( v('-----1--------2--------3--------4--------5--------6--------7--------8--------9---'), "valid sixth column");
assert(!v('-----1--------2--------3--------4--------5--------5--------7--------8--------9---'), "invalid sixth column");
assert( v('------1--------2--------3--------4--------5--------6--------7--------8--------9--'), "valid seventh column");
assert(!v('------1--------2--------3--------4--------5--------5--------7--------8--------9--'), "invalid seventh column");
assert( v('-------1--------2--------3--------4--------5--------6--------7--------8--------9-'), "valid eigth column");
assert(!v('-------1--------2--------3--------4--------5--------5--------7--------8--------9-'), "invalid eigth column");
assert( v('--------1--------2--------3--------4--------5--------6--------7--------8--------9'), "valid ninth column");
assert(!v('--------1--------2--------3--------4--------5--------5--------7--------8--------9'), "invalid ninth column");

// blocks
assert( v('123------------------------456------------------------789------------------------'), "valid first block");
assert(!v('123------------------------455------------------------789------------------------'), "invalid first block");
assert( v('---123------------------------456------------------------789---------------------'), "valid second block");
assert(!v('---123------------------------455------------------------789---------------------'), "invalid second block");
assert( v('------123------------------------456------------------------789------------------'), "valid third block");
assert(!v('------123------------------------455------------------------789------------------'), "invalid third block");

assert( v('---------123------------------------456------------------------789---------------'), "valid forth block");
assert(!v('---------123------------------------455------------------------789---------------'), "invalid forth block");
assert( v('------------123------------------------456------------------------789------------'), "valid fifth block");
assert(!v('------------123------------------------455------------------------789------------'), "invalid fifth block");
assert( v('---------------123------------------------456------------------------789---------'), "valid sixth block");
assert(!v('---------------123------------------------455------------------------789---------'), "invalid sixth block");

assert( v('------------------123------------------------456------------------------789------'), "valid forth block");
assert(!v('------------------123------------------------455------------------------789------'), "invalid forth block");
assert( v('---------------------123------------------------456------------------------789---'), "valid fifth block");
assert(!v('---------------------123------------------------455------------------------789---'), "invalid fifth block");
assert( v('------------------------123------------------------456------------------------789'), "valid sixth block");
assert(!v('------------------------123------------------------455------------------------789'), "invalid sixth block");

assert(s(' 1 ') === '---------------------------------------------------------------------------------', 'should be invalid #1');
assert(s('11-------------------------------------------------------------------------------') === '---------------------------------------------------------------------------------', 'should be invalid #2');
assert(s('916284753745396218832157496429763185378415962561928374984672531257831649613549827') === '---------------------------------------------------------------------------------', 'should be invalid #3');
assert(s('53--7----6--195----98----6-8---6---34--8-3--17---2---6-6----28----419--5----8--79') === '534678912672195348198342567859761423426853791713924856961537284287419635345286179', 'should be solveable #1');
assert(s('----8----73--9-5-1-82----7--------5--697--8-2-7----6------4-1---------465-4-31---') === '451387269736492581982516473248169357369754812175823694627948135813275946594631728', 'should be solveable #2');
assert(s('196284753745396218832157496429763185378415962561928374984672531257831649613549827') === '196284753745396218832157496429763185378415962561928374984672531257831649613549827', 'should be solveable #3');
assert(s('--------374-3-----8---5-496----6--8----4-5---5-1----7-9---7-53-------6---1---9---') === '196284753745396218832157496429763185378415962561928374984672531257831649613549827', 'should be solveable #4');
assert(s('-9---61--71--9--28--8----49-6-25---1---------5---69-7-12----8--98--4--52--56---1-') === '492786135713594628658312749867253491239471586541869273124935867986147352375628914', 'should be solveable #5');
assert(s('91-284753745396218832157496429763185378415962561928374984672531257831649613549827') === '---------------------------------------------------------------------------------', 'should be invalid');
process.exit(1);
